name: service-mlflow-dev

services:

  mlflow-server:
    container_name: mlflow_server_dev
    build:
      context: ./mlflow
      dockerfile: mlflow_server.Dockerfile
    ports:
      - "5000:5000"
    user: root
    environment:
      MLFLOW_TRACKING_URI: postgresql://mlflow:mlflowpassword@postgres:5432/mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflowpassword
      POSTGRES_DB: mlflow
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_ARTIFACT_ROOT: s3://mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - mlflow-network

  postgres:
    image: postgres:13
    container_name: mlflow_postgres_dev
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflowpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mlflow-network

  minio:
    build:
      context: ./minio
      dockerfile: minio_mlflow.Dockerfile
    container_name: mlflow_minio_dev
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - mlflow-network

  # Create a bucket named "bucket" if it doesn't exist
  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin &&
      if ! mc ls minio | grep --quiet mlfow; then
        mc mb minio/mlfow
      else
        echo 'mlflow bucket already exists'
      fi
      "

  caddy:
    image: caddy:2
    ports:
      - "8081:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - mlflow-server
    networks:
      - mlflow-network

networks:
  mlflow-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data:

# name: service-mlflow-dev

# services:

#   mlflow-server:
#     container_name: mlflow_server_dev
#     build:
#       context: ./mlflow
#       dockerfile: mlflow_server.Dockerfile
#     ports:
#       - "5000:5000"
#     user: root
#     environment:
#       MLFLOW_TRACKING_URI: postgresql://mlflow:mlflowpassword@postgres:5432/mlflow
#       POSTGRES_USER: mlflow
#       POSTGRES_PASSWORD: mlflowpassword
#       POSTGRES_DB: mlflow
#       MLFLOW_ARTIFACT_ROOT: /mlflow/artifacts
#       MLFLOW_SERVE_ARTIFACTS: "true"
#       MLFLOW_SQLALCHEMY_DATABASE_URI: postgresql://mlflow:mlflowpassword@postgres:5432/mlflow
#     volumes:
#       - mlflow_artifacts:/mlflow/artifacts:rw  # enable read and write
#     depends_on:
#       postgres:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
#       interval: 5s
#       timeout: 5s
#       retries: 3
#     networks:
#       - mlflow-network

#   postgres:
#     image: postgres:13
#     container_name: mlflow_postgres_dev
#     environment:
#       POSTGRES_DB: mlflow
#       POSTGRES_USER: mlflow
#       POSTGRES_PASSWORD: mlflowpassword
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U mlflow"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - mlflow-network

#   caddy:
#     image: caddy:2
#     ports:
#       - "8081:80"
#     volumes:
#       - ./Caddyfile:/etc/caddy/Caddyfile
#     depends_on:
#       - mlflow-server
#     networks:
#       - mlflow-network

# networks:
#   mlflow-network:
#     driver: bridge

# volumes:
#   postgres_data:
#   mlflow_artifacts:
